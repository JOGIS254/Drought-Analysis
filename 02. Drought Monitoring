Map.centerObject(geometry);

var time_start = '2001', time_end = '2024';

var ndvi= imageCollection.select('NDVI')
.filterDate(time_start, time_end);


var temp= imageCollection2.select('LST_Day_1km')
.filterDate(time_start, time_end);

// vci: vegetation condition index
// ndvi, ndvi_min, ndvi_max
// vci = (ndvi - ndvi_min)/(ndvi_max - ndvi_min)

var ndvi_min = ndvi.min().multiply(0.0001)
var ndvi_max = ndvi.max().multiply(0.0001)

// temporal function to convert data into monthly format

function temporal_collection(collection, start, count, interval, unit){
  var seq = ee.List.sequence(0, ee.Number(count).subtract(1));
  var origin_date = ee.Date(start);
  return ee.ImageCollection(seq.map(function(i){
    var start_date = origin_date.advance(ee.Number(interval).multiply(i), unit);
    var end_date = origin_date.advance(ee.Number(interval).multiply(ee.Number(i).add(1)), unit);
    return collection.filterDate(start_date, end_date).mean()
    .set('system:time_start', start_date.millis())
    .set('system:time_end', end_date.millis())
    }))
  }
  
// monthly ndvi image collection

var ndvi_monthly = temporal_collection(ndvi, time_start, 276, 1, 'month');

// vci

var vci = ndvi_monthly.map(function(img){
  var index = img.expression('(ndvi - min) / (max - min)',
  {'ndvi': img.select('NDVI').multiply(0.0001), 'min': ndvi_min, 'max': ndvi_max})
  return index.rename('VCI')
  .copyProperties(img, img.propertyNames())
  });
  

// tci: thermal condition index
// lst_max, lst_min
// tci = (max - lst) / (max  - min)

var temp_max = temp.max().multiply(0.02);
var temp_min = temp.min().multiply(0.02);

var temp_monthly = temporal_collection(temp, time_start, 276, 1, 'month');

var tci = temp_monthly.map(function(img){
  var index = img.expression('(max - lst)/(max - min)',
  {'max': temp_max, 'min': temp_min, 'lst': img.multiply(0.02)})
  return index.rename('TCI')
  .copyProperties(img,img.propertyNames())
  }) ;
  

var modis_indices = vci.combine(tci);


// vhi: vegetation health index
// vci = 0.5 * vci + (1 - 0.5) * tci


var drought = modis_indices.map(function(img){
  var vhi = img.expression('0.5 * vci + (1 - 0.5) * tci',{
    'vci': img.select('VCI'), 'tci': img.select('TCI')
    }).rename('VHI')
  return img.addBands(vhi)
  .copyProperties(img, img.propertyNames())
  });
  

print(
  ui.Chart.image.series(drought, geometry, ee.Reducer.mean(),
  1000, 'system:time_start')
  )
  
print(
  ui.Chart.image.series(drought.select('VCI','TCI'), geometry, ee.Reducer.mean(),
  1000, 'system:time_start')
  )

print(
  ui.Chart.image.series(drought.select('VHI'), geometry, ee.Reducer.mean(),
  1000, 'system:time_start')
  )

/////////////////////////////////////////////////////
// Add the NDVI, VCI, TCI, and VHI images to the map
////////////////////////////////////////////////////

// Selecting a specific date from the image collection for visualization
var specificDate = '2023-01-01'; // Change this to your desired date

// Selecting the image from the collection closest to the specific date
var selectedImage = drought.filterDate(specificDate).first();

// Adding the image to the map
Map.addLayer(selectedImage.clip(geometry), {bands: ['VHI'], min: -1, max: 1, palette: ['red', 'yellow', 'green']}, 'VHI Image');

// Visualizing other indices (VCI and TCI) separately
var vciImage = selectedImage.select('VCI');
var tciImage = selectedImage.select('TCI');

// Adding VCI image to the map
Map.addLayer(vciImage.clip(geometry), {min: 0, max: 1, palette: ['brown', 'green']}, 'VCI Image');

// Adding TCI image to the map
Map.addLayer(tciImage.clip(geometry), {min: 0, max: 1, palette: ['bl
